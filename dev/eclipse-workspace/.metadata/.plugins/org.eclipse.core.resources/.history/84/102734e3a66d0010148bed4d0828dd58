package jdbc2;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
/*
 * 1. Singleton & DB connection - getInstance, getConnection
 * 싱글톤으로 만드는게 좋음,
 * 생성자는 private
 * 자기 자신을 참조하는 객체 하나 생성
 * getter 를 만들어주는데 처음에만 최초 객체 생성되게끔하고 객체 리턴한다
 * (lazy singleton)
 *
 * 2. create - signUp
 * retrieve - getUser,userInfo, findById
 * */
public class UserDAO {
	private final String url;
	private final String dbUser;
	private final String dbPassword;

	private static UserDAO instance;
	private UserDAO() { // 생성자catch는 따로 안보내고 여기서 처리하는게 맞음.
		Properties props = new Properties();
		try(InputStream in = ClassLoader.getSystemResourceAsStream("jdbc2/db.properties");
			InputStreamReader reader =	new InputStreamReader(in, StandardCharsets.UTF_8)) {
			props.load(reader);
			url = props.getProperty("db.url");
			dbUser = props.getProperty("db.user");
			dbPassword = props.getProperty("db.password");
		}catch(Exception e) {

			throw new RuntimeException("접속정보가 없습니다.");
		}
	}

	public static UserDAO getInstance() {
		if(instance == null) {
			instance = new UserDAO();
		}
			return instance;
	}

	private Connection getConnection() throws SQLException {
		return DriverManager.getConnection(url, dbUser, dbPassword);
	}


	/*create - signUp*/
	//-------------------------------
	public void signUp(User user) throws SQLException {

		/* 비즈니스 로직은 서비스 dao는 db에 전달 관련 로직만
		*/
		String insertSQL =  UserSQL.INSERT_USER;

		try (Connection conn = DriverManager.getConnection(url, dbUser, dbPassword);
				PreparedStatement pstmt = conn.prepareStatement(insertSQL)) {
			pstmt.setString(1, user.getUsername());
			pstmt.setString(2, user.getPassword());
			pstmt.setString(3, user.getName());
			pstmt.setString(4, user.getName());
			pstmt.setInt(5, user.getBirthYear());

			pstmt.executeUpdate();
		}
	}

	public User getUser(String username, String password) throws SQLException {
		String loginSQL = UserSQL.GET_USER;
		try (Connection conn = getConnection();
				PreparedStatement pstmt = conn.prepareStatement(loginSQL)) {
			pstmt.setString(1, username);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				 return new User(username, password, rs.getString("NAME"), rs.getString("EMAIL"),
						rs.getInt("BIRTH"));
			}
		}

		//return null;
		// 임시로 시스템 에러메세지 확인을 위함
		 throw new RuntimeException(MessageUtil.get("error.login.invalid"));

	}

	public int updatePassword(String newPassword, String username) throws SQLException {
		String updateSQL = UserSQL.UPDATE_SQL;

		try (Connection conn = getConnection();
				PreparedStatement pstmt = conn.prepareStatement(updateSQL)) {
			pstmt.setString(1, newPassword);
			pstmt.setString(2, username);
			return pstmt.executeUpdate();
		}
	}

	public int deleteUser(String username) throws SQLException {
		String deleteSQL = UserSQL.DELETE_USER;
		try (Connection conn = getConnection();
				PreparedStatement pstmt = conn.prepareStatement(deleteSQL)) {
			pstmt.setString(1, username);
			return pstmt.executeUpdate();
		}

	}

	public User searchUser(String username) throws SQLException  {
		String searchSQL = UserSQL.SEARCH_USER;
		try (Connection conn = getConnection();
				PreparedStatement pstmt = conn.prepareStatement(searchSQL)) {
			pstmt.setString(1, username);
			ResultSet rs = pstmt.executeQuery();
			User user;
			if (rs.next()) {
				 user = User.builder()
						.username(rs.getString("USERNAME"))
						.name(rs.getString("NAME"))
						.email(rs.getString("EMAIL"))
						.birthYear(rs.getInt("BIRTH"))
						.build();
				 return user;
			}
			return null;
		}
	}
}
