package opp6;

public class SingleTest {
	public static void main(String[] args) {

		/*
		Singleton Pattern:
			하나의 클래스에 대해 오직 하나의 인스턴스만 생성되도록 보장하고, 그 인스턴스를 전역에서 공유하도록 만드는 디자인 패턴.

			구현 단계
			생성자를 private으로 감춰 외부에서 직접 생성하지 못하도록 막는다.
			자기 자신을 참조하는 private static (final) 인스턴스를 클래스 내부에 선언.
			정적 메서드 (getInstance())를 통해 단 하나의 인스턴스를 외부에 제공.
			Class명.getInstance()로 어디서든 동일한 인스턴스를 사용 가능.

		*/


		// 이렇게 하면 동일한 인스턴스를 참조하기때문에 hashcode가 동일하다
		Single s1 = Single.getInstance();
		Single s2 = Single.getInstance();
		System.out.println(s1.hashCode());
		System.out.println(s2.hashCode());


		Single2 s3 = Single2.getInstance();
		Single2 s4 = Single2.getInstance();
		System.out.println(s3.hashCode());
		System.out.println(s4.hashCode());



	}

}
